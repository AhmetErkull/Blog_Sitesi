// <auto-generated />
using System;
using Blog_Sitesi.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog_Sitesi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240712171422_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Teknolojik şeyler",
                            Name = "Teknoloji"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Sanat ve Kültür şeyler",
                            Name = "Sanat ve Kültür"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Kişisel Gelişim şeyler",
                            Name = "Kişisel Gelişim"
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "çok güzeldi teşekkürler",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 888, DateTimeKind.Local).AddTicks(7981),
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "dostum naber",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 888, DateTimeKind.Local).AddTicks(7994),
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            CommentId = 3,
                            Content = "vay canına",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 888, DateTimeKind.Local).AddTicks(7996),
                            PostId = 1,
                            UserId = 3
                        },
                        new
                        {
                            CommentId = 4,
                            Content = "çok bilgilendiriciydi",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 888, DateTimeKind.Local).AddTicks(7997),
                            PostId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CategoryId = 1,
                            Content = "bir şeyler bir şeyler",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 889, DateTimeKind.Local).AddTicks(2401),
                            Title = "başlık1",
                            UserId = 3
                        },
                        new
                        {
                            PostId = 2,
                            CategoryId = 2,
                            Content = "burada şunu anlatıyoruz",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 889, DateTimeKind.Local).AddTicks(2406),
                            Title = "başlık2",
                            UserId = 2
                        },
                        new
                        {
                            PostId = 3,
                            CategoryId = 1,
                            Content = "bu da böyle bir post",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 889, DateTimeKind.Local).AddTicks(2407),
                            Title = "başlık3",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTag");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            TagId = 2
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 2
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 3
                        },
                        new
                        {
                            PostId = 2,
                            TagId = 4
                        },
                        new
                        {
                            PostId = 3,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Yapay Zeka"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Veri Bilimi"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Web Geliştirme"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Mobil Uygulamalar"
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1179),
                            Email = "ahmet@gmail.com",
                            Name = "Ahmet",
                            Password = "123",
                            Role = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1186),
                            Email = "mehmet@gmail.com",
                            Name = "Mehmet",
                            Password = "456",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1187),
                            Email = "ayse@gmail.com",
                            Name = "Ayşe",
                            Password = "789",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1189),
                            Email = "fatma@gmail.com",
                            Name = "Fatma",
                            Password = "abc",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1190),
                            Email = "mustafa@gmail.com",
                            Name = "Mustafa",
                            Password = "def",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1193),
                            Email = "zeynep@gmail.com",
                            Name = "Zeynep",
                            Password = "ghi",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1194),
                            Email = "ali@gmail.com",
                            Name = "Ali",
                            Password = "jkl",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1196),
                            Email = "aysel@gmail.com",
                            Name = "Aysel",
                            Password = "mno",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1197),
                            Email = "ismail@gmail.com",
                            Name = "İsmail",
                            Password = "pqr",
                            Role = "user"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedAt = new DateTime(2024, 7, 12, 20, 14, 21, 890, DateTimeKind.Local).AddTicks(1200),
                            Email = "hulya@gmail.com",
                            Name = "Hülya",
                            Password = "stu",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Comment", b =>
                {
                    b.HasOne("Blog_Sitesi.Models.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PostId");

                    b.HasOne("Blog_Sitesi.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Post", b =>
                {
                    b.HasOne("Blog_Sitesi.Models.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog_Sitesi.Models.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.PostTag", b =>
                {
                    b.HasOne("Blog_Sitesi.Models.Entities.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog_Sitesi.Models.Entities.Tag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.Tag", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Blog_Sitesi.Models.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
